(function() {
  function WebGeneratorFireLazyLoaders() {

    const lazyElements = document.querySelectorAll('img[data-src], iframe[data-src]');
    const observerElements = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          element.src = element.dataset.src; // Load the actual resource
          observerElements.unobserve(element); // Stop observing after loading
        }
      });
    });

    lazyElements.forEach(element => {
      observerElements.observe(element); // Start observing each element
    });

    const lazyBackgrounds = document.querySelectorAll('.et_pb_section');
    const observerBackgrounds = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const bgElement = entry.target;
          bgElement.classList.add('loaded');
          observerBackgrounds.unobserve(bgElement);
        }
      });
    }, {
      threshold: 0.1  // Trigger when 10% of the element is in the viewport
    });
    
    lazyBackgrounds.forEach(element => {
      observerBackgrounds.observe(element);
    });

    
    /**
     * Lazy load JavaScript scripts with type="wpGeneratorLazyScript"
     * Ensures scripts are loaded in order, handles both inline and external scripts,
     * and waits for each to finish before loading the next.
     */
    function lazyLoadWpGeneratorScripts() {
      const scripts = Array.from(document.querySelectorAll('script[type="wpGeneratorLazyScript"]:not([data-wpgenerator-status="executed"])'));
      function loadNextScript(index) {
        if (index >= scripts.length) return;
        const script = scripts[index];
        // Mark as executing to avoid double execution
        script.setAttribute('data-wpgenerator-status', 'executing');
        const src = script.getAttribute('data-wpgenerator-src');
        if (src) {
          // External script
          const newScript = document.createElement('script');
          // Copy all attributes except type and data-wpgenerator-src
          for (let i = 0; i < script.attributes.length; i++) {
            const attr = script.attributes[i];
            if (attr.name === 'type' || attr.name === 'data-wpgenerator-src') continue;
            newScript.setAttribute(attr.name, attr.value);
          }
          newScript.type = 'text/javascript';
          newScript.src = src;
          // Optionally set fetchpriority if needed
          newScript.setAttribute('fetchpriority', 'high');
          // On load or error, continue to next script
          newScript.onload = newScript.onerror = function() {
            script.setAttribute('data-wpgenerator-status', 'executed');
            loadNextScript(index + 1);

            // ensure divi modules will reinit after load
            if (typeof et_pb_init_modules === "function") et_pb_init_modules();
            if (typeof et_reinit_waypoint_modules === "function") et_reinit_waypoint_modules();
            if (typeof et_pb_reinit_circle_counters === "function") et_pb_reinit_circle_counters();
            if (typeof et_pb_reinit_number_counters === "function") et_pb_reinit_number_counters();
          };
          // Replace the placeholder script with the new one
          script.parentNode.replaceChild(newScript, script);
        } else {
          // Inline script
          try {
            const inlineScript = document.createElement('script');
            inlineScript.type = 'text/javascript';
            // Copy all attributes except type and data-wpgenerator-src
            for (let i = 0; i < script.attributes.length; i++) {
              const attr = script.attributes[i];
              if (attr.name === 'type' || attr.name === 'data-wpgenerator-src') continue;
              inlineScript.setAttribute(attr.name, attr.value);
            }
            inlineScript.text = script.textContent;
            inlineScript.setAttribute('data-wpgenerator-status', 'executed');
            script.parentNode.replaceChild(inlineScript, script);
          } catch (e) {
            // Optionally log error, but continue
            // console.error('Error executing lazy inline script:', e);
          }
          script.setAttribute('data-wpgenerator-status', 'executed');
          loadNextScript(index + 1);
        }
      }
      loadNextScript(0);
    }

    // Add multiple user interaction triggers
    document.addEventListener('mouseover', lazyLoadWpGeneratorScripts, { once: true });
    document.addEventListener('click', lazyLoadWpGeneratorScripts, { once: true });
    document.addEventListener('touchstart', lazyLoadWpGeneratorScripts, { once: true });
    document.addEventListener('scroll', lazyLoadWpGeneratorScripts, { once: true });
    document.addEventListener('keydown', lazyLoadWpGeneratorScripts, { once: true })
  }

  // To add this script in HTML, place the following in your HTML file, preferably before the closing </body> tag:
  // <script src="path/to/lazyload.min.js"></script>
  // Or, if you want to inline it, wrap the code above in <script> ... </script>
  document.addEventListener('DOMContentLoaded', function() {
    WebGeneratorFireLazyLoaders();
  });
})();