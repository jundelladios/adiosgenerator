<?php

namespace WebGenerator;
if ( ! defined( 'ABSPATH' ) ) {
	die( 'No direct script access allowed!' );
}

use WebGenerator\GeneratorAPI;
use ET_Core_PageResource;

class GeneratorCache {

  /**
   * Initialize custom cache settings
   *
   * @return void
   */
  public function init() {
    add_action( 'adiosgenerator_clear_cache', array( $this, 'clear_cache_call' ) );
  }

  /**
   * Handles clear all cache via web generator
   *
   * @return void
   */
  public function clear_cache_call() {
    self::clear_cache();
  }

  /**
   * Handles cloudflare cache clear
   *
   * @return void
   */
  // public static function cloudflare_clear() {
  //   $parsed_url = parse_url(home_url());
  //   $domain = $parsed_url['host'];
  //   GeneratorAPI::run(
  //     GeneratorAPI::generatorapi( "/api/trpc/cw.cloudflareClear" ),
  //     array(
  //       "hostname" => $domain
  //     )
  //   );
  // }

  /**
   * Clear all cache
   *
   * @return void
   */
  public static function clear_cache() {
    // Clear Hummingbird cache
    do_action( 'wphb_clear_page_cache' );

    // Divi cache clear: ensure classes are loaded, especially for WP CLI context
    if ( ! class_exists( 'ET_Core_PageResource' ) ) {
      // Try to load Divi classes if not already loaded (for WP CLI or non-standard contexts)
      if ( function_exists( 'get_template_directory' ) ) {
        $core_dir = get_template_directory() . '/includes/core/';
        $core_file = $core_dir . 'class-et-core-page-resource.php';
        if ( file_exists( $core_file ) ) {
          require_once $core_file;
        }
      }
    }

    if ( class_exists( 'ET_Core_PageResource' ) ) {
      // For WP CLI context, we need to bypass the security check
      // by temporarily setting the option that forces cache removal
      if ( defined( 'WP_CLI' ) && WP_CLI ) {
        update_option( 'et_core_page_resource_remove_all', true );
      }
      
      // Use do_remove_static_resources for better compatibility (static method)
      if ( method_exists( 'ET_Core_PageResource', 'do_remove_static_resources' ) ) {
        ET_Core_PageResource::do_remove_static_resources( null, 'all' );
      } elseif ( method_exists( 'ET_Core_PageResource', 'remove_static_resources' ) ) {
        ET_Core_PageResource::remove_static_resources( 'all', 'all' );
      }
      
      // Clean up the option after use
      if ( defined( 'WP_CLI' ) && WP_CLI ) {
        delete_option( 'et_core_page_resource_remove_all' );
      }
      
      if ( function_exists( 'et_core_clear_transients' ) ) {
        et_core_clear_transients();
      }
      if ( function_exists( 'et_core_clear_wp_cache' ) ) {
        et_core_clear_wp_cache();
      }
      
      // Clear builder assets cache (includes static CSS files)
      if ( function_exists( 'et_fb_delete_builder_assets' ) ) {
        et_fb_delete_builder_assets();
      }
    }
    
    // Clear static CSS files generated by Divi (for both CLI and web interface)
    $theme_dir = get_template_directory();
    if ( $theme_dir ) {
      $static_css_files = array(
        $theme_dir . '/style-static.min.css',
        $theme_dir . '/style-static-rtl.min.css',
        $theme_dir . '/style-static-cpt.min.css',
        $theme_dir . '/style-static-cpt-rtl.min.css'
      );
      
      foreach ( $static_css_files as $css_file ) {
        if ( is_file( $css_file ) ) {
          unlink( $css_file );
        }
      }
    }

    // Additional direct cache clearing for WP CLI context
    // This ensures cache files are actually removed even if the above methods fail
    if ( defined( 'WP_CLI' ) && WP_CLI ) {
      $cache_dir = WP_CONTENT_DIR . '/et-cache';
      if ( is_dir( $cache_dir ) ) {
        // Remove all files in the cache directory
        $files = glob( $cache_dir . '/*' );
        foreach ( $files as $file ) {
          if ( is_file( $file ) ) {
            unlink( $file );
          } elseif ( is_dir( $file ) ) {
            // Remove files in subdirectories
            $sub_files = glob( $file . '/*' );
            foreach ( $sub_files as $sub_file ) {
              if ( is_file( $sub_file ) ) {
                unlink( $sub_file );
              }
            }
            // Remove empty subdirectories
            if ( is_dir( $file ) && count( glob( $file . '/*' ) ) === 0 ) {
              rmdir( $file );
            }
          }
        }
      }
    }

    // Clear object cache
    if ( function_exists( 'wp_cache_flush' ) ) {
      wp_cache_flush();
    }
  }
}